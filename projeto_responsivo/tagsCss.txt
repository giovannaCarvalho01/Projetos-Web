Eixo principal: o eixo principal de um flex container é o eixo primário e ao longo dele são inseridos os flex items.
Cuidado: O eixo principal não é necessariamente horizontal; vai depender da propriedade flex-direction (veja abaixo).

main-start | main-end: os flex items são inseridos dentro do container começando pelo lado start, indo em direção ao 
lado end.

Tamanho principal: A largura ou altura de um flex item, dependendo da direção do container, é o tamanho principal do
ítem. A propriedade de tamanho principal de um flex item pode ser tanto width quanto height, dependendo de qual delas
 estiver na direção principal.

Eixo transversal: O eixo perpendicular ao eixo principal é chamado de eixo transversal. Sua direção depende da 
direção do eixo principal.

cross-start | cross-end: Linhas flex são preenchidas com ítens e adicionadas ao container, começando pelo lado cross
 start do flex container em direção ao lado cross end.

cross size: A largura ou altura de um flex item, dependendo do que estiver na dimensão transversal, é o cross size 
do íten. A propriedade cross size pode ser tanto a largura quanto a altura do ítem, o que estiver na transversal.

Flex container é o elemento que envolve sua estrutura. Você define que um elemento é um Flex Container com a propriedade
 display e valores flex ou inline-flex.

 Flex Item são elementos-filhos do flex container.

Eixos ou Axes são as duas direções básicas que existem em um Flex Container: main axis, ou eixo principal,
 e cross axis, ou eixo transversal.

 Estabelece o eixo principal, definindo assim a direção em que os flex items são alinhados no flex container. 
 O Flexbox é (com exceção de um wrapping opcional) um conceito de leiaute de uma só direção. Pense nos flex items 
 inicialmente posicionaids ou em linhas horizontais ou em colunas verticais.

  .flex-container {
    flex-direction: row | row-reverse | column | column-reverse;
  }
row (padrão): esquerda para a direita em ltr (left to right), direita para a esquerda em rtl (right to left)
row-reverse: direita para a esquerda em ltr, esquerda para a direita em rtl
column: mesmo que row, mas de cima para baixo
column-reverse: mesmo que row-reverse mas de baixo para cima

Por padrão, os flex items vão todos tentar se encaixar em uma só linha. Com esta propriedade você pode modificar 
esse comportamento e permitir que os ítens quebrem para uma linha seguinte conforme for necessário.

  .flex-container {
    flex-wrap: nowrap | wrap | wrap-reverse;
  }
nowrap (padrão): todos os flex items ficarão em uma só linha
wrap: os flex items vão quebrar em múltiplas linhas, de cima para baixo
wrap-reverse: os flex items vão quebrar em múltiplas linhas de baixo para cima

A propriedade flex-flow é uma propriedade shorthand (uma mesma declaração inclui vários valores relacionados
 a mais de uma propriedade) que inclui flex-direction e flex-wrap. Determina quais serão os eixos pricipal e
  transversal do container. O valor padrão é row nowrap.

   .flex-container {
    justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
  }
flex-start (padrão): os ítens são alinhados junto à borda de início (start) de acordo com qual for a flex-direction do container.
flex-end: os ítens são alinhados junto à borda final (end) de acordo com qual for a flex-direction do container.
start: os ítens são alinhados junto à borda de início da direção do writing-mode (modo de escrita).
end: os ítens são alinhados junto à borda final da direção do writing-mode (modo de escrita).
left: os ítens são alinhados junto à borda esquerda do container, a não ser que isso não faça sentido com o flex-direction
 que estiver sendo utilizado. Nesse caso, se comporta como start.
right: os ítens são alinhados junto à borda direita do container, a não ser que isso não faça sentido com o
 flex-direction que estiver sendo utilizado. Nesse caso, se comporta como start.
center: os ítens são centralizados na linha.
space-between: os ítens são distribuídos de forma igual ao longo da linha; o primeiro ítem junto à borda inicial
 da linha, o último junto à borda final da linha.
space-around: os ítens são distribuídos na linha com o mesmo espaçamento entre eles. Note que, visualmente,
 o espaço pode não ser igual, uma vez que todos os ítens tem a mesma quantidade de espaço dos dois lados: o primeiro
  item vai ter somente uma unidade de espaço junto à borda do container, mas duas unidades de espaço entre ele e o 
  próximo ítem, pois o próximo ítem também tem seu próprio espaçamento que está sendo aplicado.
space-evenly: os ítens são distribuídos de forma que o espaçamento entre quaisquer dois itens da linha
 (incluindo entre os ítens e as bordas) seja igual.

   .flex-container {
    align-items: stretch | flex-start | flex-end | center | baseline;
  }
stretch (padrão): estica os ítens para preencher o container, respeitando o min-width/max-width).
flex-start/ start / self-start: ítens são posicionados no início do eixo transversal. A diferença entre eles é sutil 
e diz respeito às regras de flex-direction ou writing-mode.
center: ítens são centralizados no eixo transversal.
baseline: ítens são alinhados de acordo com suas baselines.

.flex-container {
    align-content: flex-start | flex-end | center | space-between | space-around | stretch;
  }
flex-start / start: ítens alinhados com o início do container. O valor (com maior suporte dos navegadores) 
flex-start se guia pela flex-direction, enquanto start se guia pela direção do writing-mode.
flex-end / end: ítens alinhados com o final do container. O valor (com maior suporte dos navegadores) 
flex-end se guia pela flex-direction, enquanto end se guia pela direção do writing-mode.
center: ítens centralizados no container.
space-between: ítens distribuídos igualmente; a primeira linha junto ao início do container e a última linha junto 
ao final do container.
space-around: ítens distribuídos igualmente com o mesmo espaçamento entre cada linha.
space-evenly: ítens distribuídos igualmente com o mesmo espaçamento entre eles.
stretch (padrão): ítens em cada linha esticam para ocupar o espaço remanescente entre elas.

Por padrão os flex items são dispostos na tela na ordem do código. Mas a propriedade order controla a ordem em que 
aparecerão no container.

  .flex-item {
    order: <número>; /* o valor padrão é 0 */
  }

  flex-grow

Define a habilidade de um flex item de crescer, caso necessário. O valor dessa propriedade é um valor numérico sem 
indicação de unidade, que serve para cálculo de proporção. Este valor dita a quantidade de espaço disponível no 
container que será ocupado pelo item.

Se todos os ítens tiverem flex-grow definido em 1, o espaço remanescente no container será distribuído de forma 
igual entre todos. Se um dos ítens tem o valor de 2, vai ocupar o dobro de espaço no container com relação aos 
outros (ou pelo menos vai tentar fazer isso).

  .flex-item {
    flex-grow: <numero>; /* o valor default(padrão) é 0 */
  }
Valores negativos não são aceitos pela propriedade.

Define o tamanho padrão para um elemento antes que o espaço remanescente do container seja distribuído. 
Pode ser um comprimento (por exemplo, 20%, 5rem, etc) ou uma palavra-chave. A palavra-chave auto significa 
"observe minhas propriedades de altura ou largura" (o que era feito pela palavra-chave main-size, que foi depreciada).
A palavra-chave content significa "estabeleça o tamanho com base no conteúdo interno do ítem" - essa palavra-chave 
ainda não tem muito suporte, então não é fácil de ser testada, assim como suas relacionadas: max-content, 
min-content e fit-content.

flex
Esta é a propriedade shorthand para flex-grow, flex-shrink e flex-basis, combinadas. 
O segundo e terceiro parâmetros (flex-shrink e flex-basis) são opcionais. O padrão é 0 1 auto, 
mas se você definir com apenas um número, é equivalente a 0 1.

  .item {
    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
  }
É recomendado que você utilize esta propriedade shorthand ao invés de definir cada uma das propriedades em separado. 
O shorthand define os outros valores de forma inteligente.

Permite que o alinhamento padrão (ou o que estiver definido por align-items) seja sobrescrito para ítens individuais.

Por favor veja a explicação da propriedade align-items para entender quais são os possíveis valores.

  .item {
    align-self: auto | flex-start | flex-end | center | baseline | stretch;
  }